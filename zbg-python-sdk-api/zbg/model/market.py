"""
Market Data
"""
from datetime import datetime

from zbg.model.common import ResultModel
from zbg.utils import Utils


class CandleStick(ResultModel):
    """
    The candlestick/kline data.

    :member
        id : keep the original timestamp
        high: The high price.
        low: The low price.
        open: The opening price.
        close: The closing price.
        amount: The aggregated trading volume in quote currency.
        rate: The change price
        volume: The trading volume in base currency.
    """

    def __init__(self, **kwargs):
        self.id = 0
        self.high = 0.0
        self.low = 0.0
        self.open = 0.0
        self.close = 0.0
        self.amount = 0.0
        self.rate = 0.0
        self.volume = 0.0

        super().__init__(**kwargs)

    @staticmethod
    def json_parse(json_array):
        data_obj = CandleStick()
        data_obj.id = json_array[3]
        data_obj.open = Utils.safe_float(json_array, 4)
        data_obj.close = Utils.safe_float(json_array, 7)
        data_obj.low = Utils.safe_float(json_array, 6)
        data_obj.high = Utils.safe_float(json_array, 5)
        data_obj.amount = Utils.safe_float(json_array, 13)
        data_obj.rate = Utils.safe_float(json_array, 9)
        data_obj.volume = Utils.safe_float(json_array, 8)
        return data_obj


class Ticker(ResultModel):
    """
    Latest Aggregated Ticker.

    :member
        symbol_id: The trading symbol id of this object
        symbol: The trading symbol of this object, e.g. btc_usdt, eos_usdt
        close: The last price of last 24 hours
        low: The low price of last 24 hours
        high: The high price of last 24 hours
        bid: The current best bid
        ask: The current best ask
        rate: The change price of last 24 hours
        amount: The aggregated trading volume in quote currency.
        volume: The trading volume in base currency of last 24 hours
    """

    def __init__(self, **kwargs):
        self.symbol_id = ''
        self.symbol = ''
        self.close = 0.0
        self.low = 0.0
        self.high = 0.0
        self.rate = 0.0
        self.amount = 0.0
        self.volume = 0.0
        self.ask = 0.0
        self.bid = 0.0

        super().__init__(**kwargs)

    @staticmethod
    def json_parse(json_array):
        data_obj = Ticker()
        data_obj.symbol_id = json_array[0]
        data_obj.close = Utils.safe_float(json_array, 1)
        data_obj.low = Utils.safe_float(json_array, 3)
        data_obj.high = Utils.safe_float(json_array, 2)
        data_obj.amount = Utils.safe_float(json_array, 9)
        data_obj.rate = Utils.safe_float(json_array, 5)
        data_obj.volume = Utils.safe_float(json_array, 4)
        data_obj.ask = Utils.safe_float(json_array, 8)
        data_obj.bid = Utils.safe_float(json_array, 7)
        return data_obj


class PriceDepth(ResultModel):
    """
    The price depth information.

    :member
        timestamp: Second unix timestamp
        bids: The list of the bid depth. The content is DepthEntry class.
        asks: The list of the ask depth. The content is DepthEntry class.
    """

    def __init__(self, **kwargs):
        self.timestamp = 0
        self.asks = list()
        self.bids = list()

        super().__init__(**kwargs)

    @staticmethod
    def json_parse(json_object):
        data_obj = PriceDepth()
        data_obj.timestamp = Utils.safe_integer(json_object, 'timestamp')
        data_obj.asks = [DepthEntry.json_parse(e) for e in json_object['asks']]
        data_obj.bids = [DepthEntry.json_parse(e) for e in json_object['bids']]

        return data_obj


class DepthEntry(ResultModel):
    """
    An depth entry consisting of price and amount.
    :member
        price: The price of the depth.
        amount: The amount of the depth.
    """

    def __init__(self, **kwargs):
        self.price = 0.0
        self.amount = 0.0

        super().__init__(**kwargs)

    @staticmethod
    def json_parse(json_array):
        entry = DepthEntry()
        entry.price = json_array[0]
        entry.amount = json_array[1]
        return entry


class Trade(ResultModel):
    """
    The trade information with price and amount etc.

    :member
        price: The trading price in quote currency.
        amount: The trading volume in base currency.
        timestamp: The UNIX formatted timestamp generated by server in UTC.
        side: The direction of the taker trade: 'buy' or 'sell'.
    """

    def __init__(self, **kwargs):
        self.price = 0.0
        self.amount = 0.0
        self.timestamp = 0
        self.side = ""

        super().__init__(**kwargs)

    @staticmethod
    def json_parse(json_array):
        trade = Trade()
        trade.price = Utils.safe_float(json_array, 5)
        trade.amount = Utils.safe_float(json_array, 6)
        trade.side = 'buy' if Utils.safe_string(json_array, 4) == 'bid' else 'sell'
        trade.timestamp = Utils.safe_integer(json_array, 2)
        return trade

    def trade_time(self):
        """
        Format the trade timestamp as 'yyyy-MM-dd HH:mm:ss'
        :return: time string
        """
        if self.timestamp:
            return datetime.fromtimestamp(self.timestamp)


class HistoricalTrade(ResultModel):
    """
    The historical trade information .

    :member
        trade_id: The unique trade id.
        price: The trading price in quote currency.
        amount: The trading volume in base currency.
        total: The trading volume in quote currency.
        side: The direction of the taker trade: 'buy' or 'sell'.
        created_at: The UNIX formatted timestamp generated by server in UTC.
        date: The trade time. format: 'yyyy-MM-dd HH:mm:ss'.
    """

    def __init__(self, **kwargs):
        self.trade_id = ''
        self.price = 0.0
        self.amount = 0.0
        self.total = 0.0
        self.side = ''
        self.created_at = 0
        self.date = ''

        super().__init__(**kwargs)
